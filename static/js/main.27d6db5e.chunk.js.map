{"version":3,"sources":["components/Stats.js","components/Stopwatch.js","components/Header.js","components/Counter.js","components/Icon.js","components/Player.js","components/AppPlayerForm.js","components/App.js","serviceWorker.js","index.js"],"names":["Stats","_ref","players","totalPlayers","length","totalPoints","reduce","total","player","score","react_default","a","createElement","className","Stopwatch","state","isRunning","elapsedTime","previousTime","tick","_this","now","Date","setState","prevState","handleStopwatch","handleReset","_this2","this","intervalID","setInterval","clearInterval","seconds","Math","floor","onClick","Component","Header","title","components_Stats","components_Stopwatch","defaultProps","Counter","index","changeScore","Icon","props","viewBox","isHighScore","d","transform","width","height","Player","_this$props","name","id","removePlayer","console","log","components_Icon","components_Counter","PureComponent","AddPlayerForm","playerInput","React","createRef","handleSubmit","e","preventDefault","addPlayer","current","value","currentTarget","reset","onSubmit","type","ref","placeholder","App","prevPlayerId","getHighScore","scores","map","p","highScore","max","apply","Object","toConsumableArray","handleScoreChange","delta","handleAddPlayer","concat","handleRemovePlayer","filter","components_Header","components_Player","key","toString","AppPlayerForm","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.27d6db5e.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Stats = ({players}) => {\r\n\r\n    const totalPlayers = players.length;\r\n    const totalPoints = players.reduce((total, player) => {\r\n        return total + player.score;\r\n    }, 0);\r\n\r\n    return (\r\n        <table className=\"stats\">\r\n            <tbody>\r\n                <tr>\r\n                    <td>Players:</td>\r\n                    <td>{totalPlayers}</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>Total Points:</td>\r\n                    <td>{totalPoints}</td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n    );\r\n}\r\n\r\nStats.propTypes = {\r\n    players: PropTypes.arrayOf(PropTypes.shape({\r\n        score: PropTypes.number\r\n    }))\r\n};\r\n\r\nexport default Stats;"," import React, { Component } from 'react';\r\n\r\nclass Stopwatch extends Component {\r\n\r\n    state = {\r\n        isRunning: false,\r\n        elapsedTime: 0,\r\n        previousTime: 0\r\n    };\r\n    //\r\n\r\n    componentDidMount() {\r\n        //console.log('Don\\'t make me lash out bro');\r\n        this.intervalID = setInterval(() => this.tick(), 1000);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.intervalID);\r\n    }\r\n\r\n    tick = () => {\r\n        if (this.state.isRunning) {\r\n            const now = Date.now();\r\n            this.setState( prevState => ({\r\n                previousTime: now,\r\n                elapsedTime: prevState.elapsedTime + (now - this.state.previousTime)\r\n            }));\r\n        }\r\n    }\r\n\r\n    handleStopwatch = () => {\r\n        this.setState( prevState => ({\r\n            isRunning: !prevState.isRunning\r\n        }));\r\n        if (!this.state.isRunning) {\r\n            this.setState({ previousTime: Date.now() });\r\n        }\r\n    }\r\n\r\n    handleReset = () => {\r\n        this.setState({ elapsedTime: 0});\r\n    }\r\n\r\n    render() {\r\n        const seconds = Math.floor(this.state.elapsedTime / 1000);\r\n\r\n        return (\r\n            <div className=\"stopwatch\">\r\n                <h2>Stopwatch</h2>\r\n                <span className=\"stopwatch-time\">{ seconds }</span>\r\n                <button onClick={this.handleStopwatch}>\r\n                    { this.state.isRunning ? 'Stop' : 'Start' }\r\n                    {/*this expression is saying if isRunning is true, display the text Stop,\r\n                    otherwise, display the text Start*/}\r\n                </button>\r\n                <button onClick={this.handleReset}>Reset</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Stopwatch;","//import React, { Component } from 'react';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Stats from './Stats';\nimport Stopwatch from './Stopwatch';\nimport './App.css';\n\nconst Header = ({ players, title }) => {\n  return (\n      <header>\n        <Stats players={players}/>\n        <h1>{ title }</h1>\n        {/* <span className=\"stats\">Players: { props.totalPlayers }</span> */}\n        <Stopwatch />\n      </header>\n  );\n}\n\nHeader.propTypes = {\n  title: PropTypes.string,\n  players: PropTypes.arrayOf(PropTypes.object)\n};\n\nHeader.defaultProps = {\n  title: 'Scoreboard'\n};\n\nexport default Header;\n","//import React, { Component } from 'react';\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './App.css';\r\n//import Counter from './Counter';\r\n\r\nconst Counter = ({index, score, changeScore}) => {\r\n  \r\n    return (\r\n        <div className=\"counter\">\r\n            <button className=\"counter-action decrement\" onClick={() => changeScore(index, -1)}> - </button>\r\n            <span className=\"counter-score\">{ score }</span>\r\n            <button className=\"counter-action increment\" onClick={() => changeScore(index, 1)}> + </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nCounter.propTypes = {\r\n    index: PropTypes.number,\r\n    score: PropTypes.number,\r\n    changeScore: PropTypes.func\r\n};\r\n\r\nexport default Counter;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Icon = (props) => {\r\n    return(\r\n        <svg viewBox=\"0 0 44 35\" className={props.isHighScore ? 'is-high-score' : null }>\r\n            <path d=\"M26.7616 10.6207L21.8192 0L16.9973 10.5603C15.3699 14.1207 10.9096 15.2672 7.77534 12.9741L0 7.24138L6.56986 28.8448H37.0685L43.5781 7.72414L35.7425 13.0948C32.6685 15.2672 28.3288 14.0603 26.7616 10.6207Z\" transform=\"translate(0 0.301727)\"/>\r\n            <rect width=\"30.4986\" height=\"3.07759\" transform=\"translate(6.56987 31.5603)\"/>\r\n        </svg>\r\n    );\r\n}\r\n\r\nIcon.propTypes = {\r\n    isHighScore: PropTypes.bool\r\n};\r\n\r\n\r\nexport default Icon;","import React, { PureComponent } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './App.css';\r\nimport '../index.css';\r\nimport Counter from './Counter';\r\nimport Icon from './Icon';\r\n\r\nclass Player extends PureComponent {\r\n\r\n    static propTypes = {\r\n        changeScore: PropTypes.func,\r\n        removePlayer: PropTypes.func,\r\n        name: PropTypes.string.isRequired,\r\n        score: PropTypes.number.isRequired,\r\n        id: PropTypes.number,\r\n        index: PropTypes.number,\r\n        isHighScore: PropTypes.bool\r\n    };\r\n\r\n    render() {\r\n        const {\r\n            name,\r\n            id,\r\n            score,\r\n            index,\r\n            removePlayer,\r\n            changeScore\r\n        } = this.props;\r\n        console.log(name + ' rendered');\r\n        return (\r\n            <div className=\"player\">\r\n                <span className=\"player-name\">\r\n                <button className=\"remove-player\" onClick={ () => removePlayer(id) }>✖</button>\r\n                <Icon isHighScore={this.props.isHighScore} /> {/* true or false */}\r\n                    { name }\r\n                </span>\r\n                <Counter \r\n                    score={score}\r\n                    index={index}\r\n                    changeScore={changeScore}\r\n                />\r\n            </div>//</player>\r\n        );\r\n    }    \r\n}\r\n  \r\n\r\nexport default Player;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass AddPlayerForm extends Component {\r\n\r\n    static propTypes = {\r\n        addPlayer: PropTypes.func\r\n    };\r\n\r\n    playerInput = React.createRef();\r\n    \r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.addPlayer(this.playerInput.current.value);\r\n        e.currentTarget.reset();\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <form onSubmit={this.handleSubmit}>\r\n                <input \r\n                    type=\"text\"\r\n                    ref={this.playerInput}\r\n                    placeholder=\"Enter a player's name\"\r\n                />\r\n                <input \r\n                    type=\"submit\"\r\n                    value=\"Add Player\"\r\n                />\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddPlayerForm;","import React, { Component } from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport Header from './Header';\nimport Player from './Player';\nimport AddPlayerForm from './AppPlayerForm';\n\nclass App extends Component {\n\n  state = {\n      players: [\n          {\n              name: \"Guil\",\n              score: 0,\n              id: 1\n          },\n          {\n              name: \"Treasure\",\n              score: 0,\n              id: 2\n          },\n          {\n              name: \"Ashley\",\n              score: 0,\n              id: 3\n          },\n          {\n              name: \"James\",\n              score: 0,\n              id: 4\n          }\n      ]\n  }\n\n  //player id counter\n  prevPlayerId = 4;\n\n  getHighScore = () => {\n      const scores = this.state.players.map( p => p.score );\n      const highScore = Math.max(...scores);\n      if (highScore) {\n          return highScore;\n      }\n      return null;\n  }\n\n  handleScoreChange = (index, delta) => {\n        this.setState( prevState => ({\n            score: prevState.players[index].score += delta\n        }));\n    }\n\n    handleAddPlayer = (name) => {\n        this.setState(prevState => {\n            return {\n                players: [\n                    ...prevState.players,\n                    //spread operator\n                    {\n                        name,\n                        score: 0,\n                        id: this.prevPlayerId += 1\n                    }\n                ]\n            }\n        });\n    }\n\n  handleRemovePlayer = (id) => {\n      this.setState( prevState => {\n          return {\n              players: prevState.players.filter(p => p.id !== id)\n              //When this function is invoked, we iterate through the player's array and state\n              //and filter out only the player object whose id does not equal the id passed into handleRemovePlayer\n          };\n      })\n  }\n\n  render() {\n    const highScore = this.getHighScore();\n\n      return (\n          <div className=\"scoreboard\">\n              <Header \n                  players={this.state.players}\n              />\n              {/* Players list */}\n              {this.state.players.map( (player, index) =>\n                  <Player \n                      name={player.name}\n                      score={player.score}\n                      id={player.id}\n                      key={player.id.toString()}\n                      index={index}\n                      changeScore={this.handleScoreChange}\n                      removePlayer={this.handleRemovePlayer}\n                      isHighScore={highScore === player.score} // is a plyer's 'score' prop equal to the high score?\n                  />\n              )}\n              \n            <AddPlayerForm addPlayer={this.handleAddPlayer}/>\n          </div>\n      );    \n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './components/App.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}